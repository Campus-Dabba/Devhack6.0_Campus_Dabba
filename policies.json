[
  {
    "schemaname": "public",
    "tablename": "orders",
    "policyname": "Users can view their own orders",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = user_id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Users can update own profile",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Allow authenticated cooks to upload profile images ",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((bucket_id = 'cook-images'::text) AND (auth.uid() = owner))"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Allow authenticated users to upload profile images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((bucket_id = 'profile-images'::text) AND (auth.uid() = owner))"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Allow cooks to upload profile images ",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((bucket_id = 'cook-images'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]))"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Allow cooks to view their own images ",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "((bucket_id = 'cook-images'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]))",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Allow users to upload profile images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((bucket_id = 'profile-images'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]))"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Allow users to view own images",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "((bucket_id = 'profile-images'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Users can insert own profile",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = id)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Users can view their own profile or admins can view all",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "((auth.uid() = id) OR is_admin(auth.uid()))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "orders",
    "policyname": "Cooks can view their assigned orders",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM cooks\n  WHERE ((cooks.id = orders.cook_id) AND (cooks.auth_user_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "orders",
    "policyname": "Cooks can update their assigned orders",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM cooks\n  WHERE ((cooks.id = orders.cook_id) AND (cooks.auth_user_id = auth.uid()))))",
    "with_check": "(EXISTS ( SELECT 1\n   FROM cooks\n  WHERE ((cooks.id = orders.cook_id) AND (cooks.auth_user_id = auth.uid()))))"
  },
  {
    "schemaname": "public",
    "tablename": "orders",
    "policyname": "Users can create orders",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = user_id)"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Service role can access all users",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "ALL",
    "qual": "(((current_setting('request.jwt.claims'::text, true))::json ->> 'role'::text) = 'service_role'::text)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Users can update their own profile or admins can update all",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "((auth.uid() = id) OR is_admin(auth.uid()))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Admins can insert users",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "is_admin(auth.uid())"
  },
  {
    "schemaname": "public",
    "tablename": "order_items",
    "policyname": "Users can view their order items",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM orders\n  WHERE ((orders.id = order_items.order_id) AND (orders.user_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "order_items",
    "policyname": "Cooks can view order items from their orders",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM (orders o\n     JOIN cooks c ON ((o.cook_id = c.id)))\n  WHERE ((o.id = order_items.order_id) AND (c.auth_user_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "order_items",
    "policyname": "Users can create order items for their orders",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(EXISTS ( SELECT 1\n   FROM orders\n  WHERE ((orders.id = order_items.order_id) AND (orders.user_id = auth.uid()))))"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Admins can delete users",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "DELETE",
    "qual": "is_admin(auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "cooks",
    "policyname": "Cooks can view their own data",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "cooks",
    "policyname": "Cooks can update their own data",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "cooks",
    "policyname": "Cooks can insert their own data",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "(auth.uid() = id)"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Anyone can view cook images",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(bucket_id = 'cook-images'::text)",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Authenticated users can upload cook images",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "((bucket_id = 'cook-images'::text) AND (auth.role() = 'authenticated'::text))"
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Users can update their own cook images",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "UPDATE",
    "qual": "((bucket_id = 'cook-images'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]))",
    "with_check": null
  },
  {
    "schemaname": "storage",
    "tablename": "objects",
    "policyname": "Users can delete their own cook images",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "DELETE",
    "qual": "((bucket_id = 'cook-images'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "cooks",
    "policyname": "Anyone can view cook profiles for browsing",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "true",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "order_items",
    "policyname": "Users can view their own order items",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM orders\n  WHERE ((orders.id = order_items.order_id) AND (orders.user_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "order_items",
    "policyname": "Cooks can view their order items",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(cook_id = auth.uid())",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "order_items",
    "policyname": "Admins can view all order items",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND (users.role = 'admin'::text))))",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "order_items",
    "policyname": "System can insert order items",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "true"
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Users can view own profile",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(auth.uid() = id)",
    "with_check": null
  },
  {
    "schemaname": "public",
    "tablename": "users",
    "policyname": "Cooks can view customers",
    "permissive": "PERMISSIVE",
    "roles": "{public}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM (orders o\n     JOIN cooks c ON ((o.cook_id = c.id)))\n  WHERE ((o.user_id = users.id) AND (c.auth_user_id = auth.uid()))))",
    "with_check": null
  },
  {
    "schemaname": "auth",
    "tablename": "users",
    "policyname": "Admins can view all users",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "SELECT",
    "qual": "(EXISTS ( SELECT 1\n   FROM admins\n  WHERE (admins.id = auth.uid())))",
    "with_check": null
  },
  {
    "schemaname": "auth",
    "tablename": "users",
    "policyname": "Admins can update user metadata",
    "permissive": "PERMISSIVE",
    "roles": "{authenticated}",
    "cmd": "UPDATE",
    "qual": "(EXISTS ( SELECT 1\n   FROM admins\n  WHERE (admins.id = auth.uid())))",
    "with_check": "(EXISTS ( SELECT 1\n   FROM admins\n  WHERE (admins.id = auth.uid())))"
  }
]